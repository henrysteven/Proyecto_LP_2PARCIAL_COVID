summary(gradoX)
sd(gradoX)
#datos gradoY
summary(gradoY)
sd(gradoY)
gradoX <- c(568, 570,575,578,584)
gradoY <- c(573,574,575,577,578)
# datos gradoX
summary(gradoX)
#desviacion estandar X
sd(gradoX)
#datos gradoY
summary(gradoY)
#desviacion estandar Y
sd(gradoY)
gradoX <- c(568, 570,575,578,584)
gradoY <- c(573,574,575,577,584)
# datos gradoX
summary(gradoX)
#desviacion estandar X
sd(gradoX)
#datos gradoY
summary(gradoY)
#desviacion estandar Y
sd(gradoY)
millas <- c(24,23,22,21,22,22,18,18,26,26,26,19,19,19,21,21,21,21,21,18,19,21,22,22,16,16)
# datos gradoX
quantile(gradoX)
millas <- c(24,23,22,21,22,22,18,18,26,26,26,19,19,19,21,21,21,21,21,18,19,21,22,22,16,16)
# datos millas
quantile(millas)
iqr(millas)
IQR(millas)
#summary
summary(millas)[0:5]
boxplot(millas,title = "millas")
boxplot(millas, main = "millas")
millas <- c(24,23,22,21,22,22,18,18,26,26,26,19,19,19,21,21,21,21,21,18,19,21,22,22,16,16)
# rangos intercuartiles, 25 y 75% son el primer y el tercer cuartil respectivamente
quantile(millas)
# funcion para el rango intercuartil
IQR(millas)
#summary
summary(millas)[0:5]
boxplot(millas, main = "millas")
costo <- c(96,171,202,178,147,102,153,197,127,82,157,185,90,116,172,111,148,213,130,165,141,149,206,175,123,128,144,168,109,167,95,163,150,154,130,143,187,166,139,149,108,119,183,151,114,135,191,137,129,158)
# ordenar datos
sort(costo)
# tabla de costos
table(costo)
#algoritmo Sturges
table(costo, breaks = 'Sturges')
#algoritmo Sturges
hist(costo, breaks = 'Sturges')
#algoritmo Scott
hist(costo, breaks = 'Scott')
#algoritmo Sturges
hist(costo, breaks = 'Sturges', main = "algoritmo sturges")
#algoritmo Scott
hist(costo, breaks = 'Scott', main = "algoritmo scott")
hist(costo, breaks = 'FD', main = "algoritmo FD")
#algoritmo Scott
hist(costo, breaks = 'Scott', main = "algoritmo scott")
FD
#algoritmo Sturges
Sturges <- hist(costo, breaks = 'Sturges', main = "algoritmo sturges")
Sturges
#algoritmo Scott
Scott <- hist(costo, breaks = 'Scott', main = "algoritmo scott")
Scott
FD <- hist(costo, breaks = 'FD', main = "algoritmo FD")
FD
costo <- c(96,171,202,178,147,102,153,197,127,82,157,185,90,116,172,111,148,213,130,165,141,149,206,175,123,128,144,168,109,167,95,163,150,154,130,143,187,166,139,149,108,119,183,151,114,135,191,137,129,158)
# ordenar datos
sort(costo)
# ver cuales valores estan repetidos en costos y cuantas veces
table(costo)
#algoritmo Sturges
Sturges <- hist(costo, breaks = 'Sturges', main = "algoritmo sturges")
Sturges
#algoritmo Scott
Scott <- hist(costo, breaks = 'Scott', main = "algoritmo scott")
Scott
FD <- hist(costo, breaks = 'FD', main = "algoritmo FD")
FD
#Esta es una práctica de BEST: Behavioral Economics & Data Science Team
#2019-02-04
#0. Instalar paquetes necesarios para la práctica si no los tiene instalados.
#Si ya los instaló solo coméntelos.
install.packages("dplyr")
install.packages("tidyr")
install.packages("readxl")
#Validar si los paquetes se han instalado
library(dplyr)
library(tidyr)
library(readxl)
?readxl #para conocer un poco mas sobre una librería
#1. Lectura de Datos
#1.1 Descargando y renombrando el archivo,
fileUrl="http://intranet2.sbs.gob.pe/estadistica/financiera/2018/Junio/B-2401-jn2018.XLS"
download.file(fileUrl,destfile="archivoPractica.XLS",mode="wb") #wb se utiliza para archivos excel, no son de texto plano
datos<-readxl::read_xlsx("archivoPractica.XLS")  #cargando el dataframe
View(datos) #para observar los datos
#2. Selección de datos y Limpieza
#2.1. Eliminar filas/celdas del encabezado del reporte
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
View(datos)
#2.2. Eliminar filas donde hayan NA
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.2. Auxiliar si se borran todas las filas (SOLO PROBAR SI EN EL 2.2 SE LE HA BORRADO TODO, SINO VAYA AL 2.3)
#En el caso de que su dataframe quede vacío será porque en su versión se ha agregado una columna llena de NA
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.3. Eliminar columnas que no se necesiten
names(datos)[10] #nombres de las columnas, hay una que no es Banco
datos<-datos[,-10]# eliminar la columna 10 si no es un banco
View(datos)
#3. Estandarizar el dataframe
#3.1 Imprime los campos restantes
names(datos) #obtener los nombres de Instituciones Financiera
#renombras las columnas
#3.2 Cambiar nombre de columnas
names(datos)<- c("variables", "BBVA","B Comercio", "BCP",
"Pichincha","BIF","Scotiabank",
"Citibank","Interbank","Mibanco",
"GNB","Falabella","Santander","Ripley","Azteca","Cencosud","ICBC",
"Total")
View(datos) #el dataframe tiene nuevos campos
#4. Transformar datos
#4.1. Cambiar exponenciales, redondear
options(scipen=999) # para desactivar la nomenclatura cientifica de números
exc = !names(datos) %in% "variables" # una forma de elegir todo excepto una columna de un vector
exc # va a aplicar todo excepto a la primera columna
datos[,exc] # ven? no aparece la columns "variables"
datos[,exc] = sapply(datos[,exc],as.character) # lo convierto a character.
#Es buena practica convertir siempre a character tus datos numéricos y luego pasarlos a numeric recién.
#¿Por qué? Porque a veces por alguna razón el excel no est´á bien formado y te podría aparecer tipo factor
#o character y tener problemas y no darte cuenta hasta el proceso de modelación
datos[,exc] = sapply(datos[,exc],as.numeric) # lo conviertes a numérico
datos[,exc] = round(datos[,exc],2) #si deseas redondear a 2 cifras
View(a)
#4.2. Restructurar Dataframe para visualizaciones, Bancos son registros, indicadores columnas
datos %>% gather() %>% View() #vista como un diccionario: key, value
datos %>% gather(Bancos) %>% View() #vista Bancos es key
datos %>% gather(Bancos,valores) %>% View() #vista Bancos es key, valores value
datos %>% gather(Bancos,valores,-variables) %>% View() #vista, incluyendo columna variables
dataDif<-datos%>% gather(Bancos,valores,-variables)
dataDif %>% spread(variables,valores) %>% View() #invierte las variables a columnas
datosListos<-dataDif %>% spread(variables,valores)
datosListos$Fecha= as.Date("2021-01-13") #agregamos una columna si deseamos
View(datosListos) #vista previa antes de guardar
#1. Lectura de Datos
#1.1 Descargando y renombrando el archivo,
fileUrl="http://intranet2.sbs.gob.pe/estadistica/financiera/2018/Junio/B-2401-jn2018.XLS"
download.file(fileUrl,destfile="archivoPractica.XLS",mode="wb") #wb se utiliza para archivos excel, no son de texto plano
datos<-readxl::read_xlsx("archivoPractica.XLS")  #cargando el dataframe
View(datos) #para observar los datos
#2. Selección de datos y Limpieza
#2.1. Eliminar filas/celdas del encabezado del reporte
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
View(datos)
#2.2. Eliminar filas donde hayan NA
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.2. Auxiliar si se borran todas las filas (SOLO PROBAR SI EN EL 2.2 SE LE HA BORRADO TODO, SINO VAYA AL 2.3)
#En el caso de que su dataframe quede vacío será porque en su versión se ha agregado una columna llena de NA
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.3. Eliminar columnas que no se necesiten
names(datos)[10] #nombres de las columnas, hay una que no es Banco
datos<-datos[,-10]# eliminar la columna 10 si no es un banco
View(datos)
#3. Estandarizar el dataframe
#3.1 Imprime los campos restantes
names(datos) #obtener los nombres de Instituciones Financiera
#renombras las columnas
#3.2 Cambiar nombre de columnas
names(datos)<- c("variables", "BBVA","B Comercio", "BCP",
"Pichincha","BIF","Scotiabank",
"Citibank","Interbank","Mibanco",
"GNB","Falabella","Santander","Ripley","Azteca","Cencosud","ICBC",
"Total")
View(datos) #el dataframe tiene nuevos campos
#4. Transformar datos
#4.1. Cambiar exponenciales, redondear
options(scipen=999) # para desactivar la nomenclatura cientifica de números
exc = !names(datos) %in% "variables" # una forma de elegir todo excepto una columna de un vector
exc # va a aplicar todo excepto a la primera columna
datos[,exc] # ven? no aparece la columns "variables"
datos[,exc] = sapply(datos[,exc],as.character) # lo convierto a character.
#Es buena practica convertir siempre a character tus datos numéricos y luego pasarlos a numeric recién.
#¿Por qué? Porque a veces por alguna razón el excel no est´á bien formado y te podría aparecer tipo factor
#o character y tener problemas y no darte cuenta hasta el proceso de modelación
datos[,exc] = sapply(datos[,exc],as.numeric) # lo conviertes a numérico
datos[,exc] = round(datos[,exc],2) #si deseas redondear a 2 cifras
View(a)
#4.2. Restructurar Dataframe para visualizaciones, Bancos son registros, indicadores columnas
datos %>% gather() %>% View() #vista como un diccionario: key, value
datos %>% gather(Bancos) %>% View() #vista Bancos es key
datos %>% gather(Bancos,valores) %>% View() #vista Bancos es key, valores value
datos %>% gather(Bancos,valores,-variables) %>% View() #vista, incluyendo columna variables
dataDif<-datos%>% gather(Bancos,valores,-variables)
dataDif %>% spread(variables,valores) %>% View() #invierte las variables a columnas
datosListos<-dataDif %>% spread(variables,valores)
datosListos$Fecha= as.Date("2021-01-13") #agregamos una columna si deseamos
View(datosListos) #vista previa antes de guardar
#5 Almacenar datos limpios y transformados
#5.1. Guardar datos transformados
saveRDS(datosListos,file="misDatosParaGraficar.RDS") #Guardar los datos
#5 Almacenar datos limpios y transformados
#5.1. Guardar datos transformados
saveRDS(datosListos,file="misDatosParaGraficar.RDS") #Guardar los datos
#5 Almacenar datos limpios y transformados
#5.1. Guardar datos transformados
saveRDS(datosListos,file="misDatosParaGraficar.RDS") #Guardar los datos
getwd()
data <- readRDS("misDatosParaGraficar.RDS")
datards <- readRDS("misDatosParaGraficar.RDS")
getwd()
datards <- readRDS("misDatosParaGraficar.RDS")
datards.data
datards$data
datards$dataDif
view(datards)
datards <- readRDS("misDatosParaGraficar.RDS")
datards.table()
datards <- readRDS("misDatosParaGraficar.RDS")
datards.dataDif()
datards.dataDif
str(datards)
view(datards)
datards.Fecha
datards$Fecha
boxplot(datards$`Créditos Atrasados con más de 90 días de atraso / Créditos Directos`)
histogram(datards$`Créditos Atrasados con más de 90 días de atraso / Créditos Directos`)
hist(datards$`Créditos Atrasados con más de 90 días de atraso / Créditos Directos`)
hist(datards$`Ingresos Financieros / Ingresos Totales`)
plot(datards$`Ingresos Financieros / Ingresos Totales`)
barplot(datards$`Ingresos Financieros / Ingresos Totales`)
barplot(ylab = datards$`Ingresos Financieros / Ingresos Totales`, xlab = datards$Bancos)
barplot(ylab = datards$`Ingresos Financieros / Ingresos Totales`, xlab = datards$Bancos, height = 100)
getwd()
View(datosListos) #vista previa antes de guardar
barplot(datards$`Ingresos Financieros / Ingresos Totales`)
barplot(datards$`Ingresos Financieros / Ingresos Totales`, xlab = datards$Bancos)
datards$Bancos
barplot(datards$`Ingresos Financieros / Ingresos Totales`, xlab = datards$Bancos)
graph1 = table(datards$`Ingresos Financieros / Ingresos Totales`, datards$Bancos)
barplot(graph1, xlab = datards$Bancos)
barplot(graph1,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos")
view(graph1)
(graph1)
graph1 = table(datards$`Ingresos Financieros / Ingresos Totales`)
graph1$Bancos <- datards$Bancos
(graph1)
barplot(graph1,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos")
graph1 = select(datards$`Ingresos Financieros / Ingresos Totales`,datards$Bancos)
(graph1)
barplot(graph1,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos")
graph1 %>% select(datards$`Ingresos Financieros / Ingresos Totales`,datards$Bancos)
(graph1)
barplot(graph1,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos")
v <- c(datards$Bancos)
graph1 %>% select(datards$`Ingresos Financieros / Ingresos Totales`,v)
graph1 <- select(datards$`Ingresos Financieros / Ingresos Totales`,v)
graph1 <- select(datards$`Ingresos Financieros / Ingresos Totales`,datards$Bancos)
graph1 <- select(datards$`Ingresos Financieros / Ingresos Totales`,datards$'Bancos')
(graph1)
graph1 <- select(datards$`Ingresos Financieros / Ingresos Totales`,datards$'Bancos')
graph1 <- select(datards$`Ingresos Financieros / Ingresos Totales`,datards$`Bancos`)
(graph1)
barplot(graph1,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos")
barplot(datards$`Ingresos Financieros / Ingresos Totales`,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos")
barplot(datards$`Ingresos Financieros / Ingresos Totales`,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos", names.arg = datards$Bancos = )
barplot(datards$`Ingresos Financieros / Ingresos Totales`,ylab="Ingresos Financieros/Ingresos Totales", main = "Ingresos Financieros/Ingresos Totales de cada Banco",xlab = "Bancos", names.arg = datards$Bancos )
boxplot(datards$`Depósitos / Número de Oficinas ( S/ Miles )` main = "Cantidad de Depositos con respecto al numero de oficinas")
boxplot(datards$`Depósitos / Número de Oficinas ( S/ Miles )` ,main = "Cantidad de Depositos con respecto al numero de oficinas")
plot(datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`,datards$`Ingresos Financieros / Ingresos Totales`, main = "Scatterplot de Gastos de Administracion vs Ingresos.")
abline = (lm(datards$`Ingresos Financieros / Ingresos Totales`~datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`), col = "blue", lwd = 2)
abline = (lm(datards$`Ingresos Financieros / Ingresos Totales`~ datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`), col = "blue", lwd = 2)
abline = (lm(datards$`Ingresos Financieros / Ingresos Totales`~ datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`) col = "blue", lwd = 2)
abline(lm(datards$`Ingresos Financieros / Ingresos Totales` ~ datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`), col = "blue", lwd = 2)
abline(lm(datards$`Ingresos Financieros / Ingresos Totales` ~ datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`), col = "blue", lwd = 2)
plot(gastos,ingresos, main = "Scatterplot de Gastos de Administracion vs Ingresos.")
#Grafico 3. Relacion de los gastos de administracion comparado a los ingresos financieros
gastos <- datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`
ingresos <- datards$`Ingresos Financieros / Ingresos Totales`
plot(gastos,ingresos, main = "Scatterplot de Gastos de Administracion vs Ingresos.")
abline(lm(ingresos ~ gastos), col = "blue", lwd = 2)
#Pregunta 1. Cual es la relacion entre los gastos del banco (De administracion o de operacion) con los ingresos?
pregunta1 <- datos%>% gather(Bancos,valores,-variables)
#Pregunta 1. Cual es la relacion entre los gastos del banco (De administracion o de operacion) con los ingresos?
pregunta1 <- datards%>% gather(datards$Bancos,datards$`Ingresos Financieros / Ingresos Totales`,datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`,datards$`Gastos de Operación / Margen Financiero Total`)
#Pregunta 1. Cual es la relacion entre los gastos del banco (De administracion o de operacion) con los ingresos?
pregunta1 <-  gather(datards$Bancos,datards$`Ingresos Financieros / Ingresos Totales`,datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`,datards$`Gastos de Operación / Margen Financiero Total`)
#Pregunta 1. Cual es la relacion entre los gastos del banco (De administracion o de operacion) con los ingresos?
pregunta1 <-  table(datards$Bancos,datards$`Ingresos Financieros / Ingresos Totales`,datards$`Gastos de Administración Anualizados / Activo Productivo Promedio`,datards$`Gastos de Operación / Margen Financiero Total`)
pregunta1
pregunta1
#Pregunta 1. Cual es la relacion entre los gastos del banco (De administracion o de operacion) con los ingresos?
pregunta1 <-  select(datards, Bancos, `Gastos de Administración Anualizados / Activo Productivo Promedio`,`Gastos de Operación / Margen Financiero Total`)
#Pregunta 1. Cual es la relacion entre los gastos del banco (De administracion o de operacion) con los ingresos?
pregunta1 <-  select(datards, Bancos, `Gastos de Administración Anualizados / Activo Productivo Promedio`,`Gastos de Operación / Margen Financiero Total`, `Ingresos Financieros / Ingresos Totales`)
pregunta1
write.csv(pregunta1, "pregunta1.csv",row.names = TRUE)
#Pregunta 2. Cuales bancos tienen mas depositos / numero de oficinas que la media?
pregunta2 <- select(datards, Bancos, `Depósitos / Número de Oficinas ( S/ Miles )`)
pregunta2 <- pregunta2[pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )` >= mean (pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )`)]
pregunta2 <- [pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )` >= mean (pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )`)]
pregunta2R <- [pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )` >= mean (pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )`)]
pregunta2R <- pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )` >= mean (pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )`)
pregunta2R
pregunta2
pregunta2R <- pregunta2[pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )` >= mean (pregunta2$`Depósitos / Número de Oficinas ( S/ Miles )`)]
#Pregunta 2. Cuales bancos tienen mas depositos / numero de oficinas que la media?
depositos <- datards$`Depósitos / Número de Oficinas ( S/ Miles )`
newTable = datards[depositos >= mean(depositos)]
depositos
datards
newTable = depositos[depositos >= mean(depositos)]
newTable
newTable = table(bancos[depositos >= mean(depositos)],depositos[depositos >= mean(depositos)])
bancos <- datards$Bancos
newTable = table(bancos[depositos >= mean(depositos)],depositos[depositos >= mean(depositos)])
newTable
newTable = data.frame(bancos[depositos >= mean(depositos)],depositos[depositos >= mean(depositos)])
newTable
colnames(pregunta2) <- c("Bancos", "Número de Oficinas ( S/ Miles )`")
pregunta2
#Pregunta 2. Cuales bancos tienen mas depositos / numero de oficinas que la media?
depositos <- datards$`Depósitos / Número de Oficinas ( S/ Miles )`
bancos <- datards$Bancos
pregunta2 = data.frame(bancos[depositos >= mean(depositos)],depositos[depositos >= mean(depositos)])
colnames(pregunta2) <- c("Bancos", "Número de Oficinas ( S/ Miles )`")
pregunta2
pregunta3 <- select(datards, Bancos, `Créditos Atrasados (criterio SBS)* / Créditos Directos`,`Créditos Atrasados con más de 90 días de atraso / Créditos Directos`,`Créditos Atrasados ME (criterio SBS)* / Créditos Directos ME`, `Créditos Atrasados MN (criterio SBS)* / Créditos Directos MN`, `Créditos Directos / Personal ( S/ Miles )`)
library("RMySQL")
db_user <- 'MRW5QqWySG'
db_password <- '1bHwPnObOa'
db_name <- 'MRW5QqWySG'
db_table <- 'Persona'
db_host <- 'remotemysql.com' # for local access
db_port <- 3306
# 3. Read data from db
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("select * from ", db_table)
rs <- dbSendQuery(mydb, s)
df <-  fetch(rs, n = -1)
covid <- df$covid
edad <- df$edad
data <- data.frame(covid,edad)
data
edad
edad <- df$edad
grupodeedad <- cut(edad, breaks=c(0,13,21,30,60,Inf))
grupoedad
grupoedad <- cut(edad, breaks=c(0,13,21,30,60,Inf))g
grupoedad
grupoedad <- cut(edad, breaks=c(0,13,21,30,60,Inf))
grupoedad
table(grupoedad)
data <- data.frame(covid,grupoedad)
data
library("RMySQL")
barplot(data, main = "Casos de COVID por ciudad")
barplot(data, main = "Casos de COVID por ciudad", beside = TRUE)
barplot(table(data), main = "Casos de COVID por ciudad", beside = TRUE)
barplot(table(data), main = "Edad de los encuestados y COVID",col = c("red","blue"), legend = rownames(c("si","no")), beside = TRUE)
barplot(table(data), main = "Edad de los encuestados y COVID",col = c("red","blue"), beside = TRUE)
barplot(table(data), main = "Edad de los encuestados y COVID",legend = TRUE, col = c("red","blue"), beside = TRUE)
barplot(table(data), main = "Edad de los encuestados y COVID",legend = TRUE, col = c("blue","red"), beside = TRUE)
barplot(table(data), main = "Edad de los encuestados y COVID",names.arg = c("0-13", "13-21", "21-30", "30-60","60+"),legend = TRUE, col = c("blue","red"), beside = TRUE)
legend("topright", c("negativo","positivo"))
legend("topright", c("negativo","positivo"), col = c("blue","red"))
legend("topright", c("negativo","positivo"), col = par("blue","red"))
barplot(table(data), main = "Edad de los encuestados y COVID",names.arg = c("0-13", "13-21", "21-30", "30-60","60+"), col = c("blue","red"), beside = TRUE)
legend("topright", c("negativo","positivo"), col = par("blue","red"))
legend("topright", c("negativo","positivo"),fill= TRUE, col = par("blue","red"))
legend("topright", c("negativo","positivo"),fill= TRUE, bg = c("blue","red"))
legend("topright", c("negativo","positivo"),fill= TRUE, col = par("blue","red"))
legend("topright", c("negativo","positivo"),fill= c("blue","red"))
library("RMySQL")
db_user <- 'MRW5QqWySG'
db_password <- '1bHwPnObOa'
db_name <- 'MRW5QqWySG'
db_table <- 'Persona'
db_host <- 'remotemysql.com' # for local access
db_port <- 3306
# 3. Read data from db
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("select * from ", db_table)
rs <- dbSendQuery(mydb, s)
df <-  fetch(rs, n = -1)
covid <- df$covid
edad <- df$edad
grupoedad <- cut(edad, breaks=c(0,13,21,30,60,Inf))
grupoedad
table(grupoedad)
data <- data.frame(covid,grupoedad)
data
setwd("..")
getwd()
png(filename = "imagenes\\edadycovid.png", width = 500, height = 500)
barplot(table(data),names.arg = c("0-13", "13-21", "21-30", "30-60","60+"), col = c("blue","red"), beside = TRUE)
legend("topright", c("negativo","positivo"),fill= c("blue","red"))
dev.off()
on.exit(dbDisconnect(mydb))
library("RMySQL")
db_user <- 'MRW5QqWySG'
db_password <- '1bHwPnObOa'
db_name <- 'MRW5QqWySG'
db_table <- 'Persona'
db_host <- 'remotemysql.com' # for local access
db_port <- 3306
# 3. Read data from db
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("select * from ", db_table)
rs <- dbSendQuery(mydb, s)
df <-  fetch(rs, n = -1)
df
sintomas <- df$sintomas[df$covid != "no"]
data <- data.frame(table(sintomas))
percents <- (data$Freq/sum(data$Freq))*100
data$Freq
data$Freq
data <- data.frame(table(formacontagio))
percents <- (data$Freq/sum(data$Freq))*100
library("RMySQL")
db_user <- 'MRW5QqWySG'
db_password <- '1bHwPnObOa'
db_name <- 'MRW5QqWySG'
db_table <- 'Persona'
db_host <- 'remotemysql.com' # for local access
db_port <- 3306
# 3. Read data from db
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("select * from ", db_table)
rs <- dbSendQuery(mydb, s)
df <-  fetch(rs, n = -1)
formacontagio <- df$forma_contagio[df$covid != "no"]
data <- data.frame(table(formacontagio))
percents <- (data$Freq/sum(data$Freq))*100
formacontagio
lbls <- data$formacontagio
lbls <- paste(lbls, percents)
lbls <- paste(lbls, "%", sep="")
pie(data$Freq, labels = lbls, col = rainbow(length(lbls)),main = "Piechart de sintomas de pacientes")
hospital <- df$hospitalizado
sintomas <- df$sintomas
data <- data.frame(hospital,sintomas)
data
barplot(table(data), col = c("blue","red"), beside = TRUE)
legend("topright", c("no hospitalizado","hospitalizado"),fill= c("blue","red"))
barplot(table(data), col = c("blue","red"), beside = TRUE)
library("RMySQL")
db_user <- 'MRW5QqWySG'
db_password <- '1bHwPnObOa'
db_name <- 'MRW5QqWySG'
db_table <- 'Persona'
db_host <- 'remotemysql.com' # for local access
db_port <- 3306
# 3. Read data from db
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("select * from ", db_table)
rs <- dbSendQuery(mydb, s)
df <-  fetch(rs, n = -1)
df
hospital <- df$hospitalizado
sintomas <- df$sintomas
data <- data.frame(hospital,sintomas)
data
data
barplot(table(data), col = c("blue","red"), beside = TRUE)
library("RMySQL")
db_user <- 'MRW5QqWySG'
db_password <- '1bHwPnObOa'
db_name <- 'MRW5QqWySG'
db_table <- 'Persona'
db_host <- 'remotemysql.com' # for local access
db_port <- 3306
# 3. Read data from db
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("select * from ", db_table)
rs <- dbSendQuery(mydb, s)
df <-  fetch(rs, n = -1)
formacontagio <- df$forma_contagio[df$covid != "no"]
data <- data.frame(table(formacontagio))
percents <- (data$Freq/sum(data$Freq))*100
formacontagio
lbls <- data$formacontagio
lbls <- paste(lbls, percents)
lbls <- paste(lbls, "%", sep="")
setwd("..")
png(filename = "imagenes\formacontagio.png", width = 500, height = 500)
png(filename = "imagenes\\formacontagio.png", width = 500, height = 500)
pie(data$Freq, labels = lbls, col = rainbow(length(lbls)),main = "Piechart de formas de contagio")
dev.off()
on.exit(dbDisconnect(mydb))
